diff --git a/WORKSPACE b/WORKSPACE
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -215,6 +215,12 @@ new_local_repository(
     path = "C:\\opencv\\build",
 )
 
+new_local_repository(
+    name = "godot",
+    build_file = "@//third_party:godot.BUILD",
+    path = "../godot-cpp",
+)
+
 http_archive(
     name = "android_opencv",
     build_file = "@//third_party:opencv_android.BUILD",
diff --git a/third_party/BUILD b/third_party/BUILD
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -317,3 +317,11 @@ java_library(
         "@maven//:com_google_auto_value_auto_value_annotations",
     ],
 )
+
+cc_library(
+    name = "godot",
+    visibility = ["//visibility:public"],
+    deps = [
+        "@godot//:godot",
+    ],
+)
diff --git a/third_party/godot.BUILD b/third_party/godot.BUILD
new file mode 100644
--- /dev/null
+++ b/third_party/godot.BUILD
@@ -0,0 +1,31 @@
+licenses(["notice"])  # MIT
+
+exports_files(["LICENSE"])
+
+cc_library(
+    name = "godot",
+    srcs = select({
+        "@mediapipe//mediapipe:android_arm64": [
+            "bin/libgodot-cpp.android.release.arm64v8.a",
+        ],
+        "@mediapipe//mediapipe:windows": [
+            "bin/libgodot-cpp.windows.release.64.lib",
+        ],
+        "//conditions:default": [
+            "bin/libgodot-cpp.linux.release.64.a",
+        ],
+    }),
+    hdrs = glob([
+        "godot-headers/*.h",
+        "godot-headers/*/*.h",
+        "include/*/*.hpp",
+    ]),
+    includes = [
+        "godot-headers",
+        "include",
+        "include/core",
+        "include/gen",
+    ],
+    linkstatic = 1,
+    visibility = ["//visibility:public"],
+)
diff --git a/mediapipe/java/com/google/mediapipe/components/CameraXPreviewHelper.java b/mediapipe/java/com/google/mediapipe/components/CameraXPreviewHelper.java
--- a/mediapipe/java/com/google/mediapipe/components/CameraXPreviewHelper.java
+++ b/mediapipe/java/com/google/mediapipe/components/CameraXPreviewHelper.java
@@ -320,6 +320,16 @@ public class CameraXPreviewHelper extends CameraHelper {
         mainThreadExecutor);
   }
 
+  public void closeCamera(Activity activity) {
+    if(cameraProvider != null) {
+      activity.runOnUiThread(
+          () -> {
+            cameraProvider.unbindAll();
+          }
+      );
+    }
+  }
+
   /**
    * Captures a new still image and saves to a file along with application specified metadata. This
    * method works when {@link CameraXPreviewHelper#startCamera(Activity, ImageCapture.Builder,
diff --git a/mediapipe/java/com/google/mediapipe/framework/PacketGetter.java b/mediapipe/java/com/google/mediapipe/framework/PacketGetter.java
--- a/mediapipe/java/com/google/mediapipe/framework/PacketGetter.java
+++ b/mediapipe/java/com/google/mediapipe/framework/PacketGetter.java
@@ -146,6 +146,10 @@ public final class PacketGetter {
     return nativeGetFloat64Vector(packet.getNativeHandle());
   }
 
+  public static byte[][] getProtoBytesVector(final Packet packet) {
+    return nativeGetProtoVector(packet.getNativeHandle());
+  }
+
   public static <T> List<T> getProtoVector(final Packet packet, Parser<T> messageParser) {
     byte[][] protoVector = nativeGetProtoVector(packet.getNativeHandle());
     Preconditions.checkNotNull(
diff --git a/mediapipe/util/BUILD b/mediapipe/util/BUILD
--- a/mediapipe/util/BUILD
+++ b/mediapipe/util/BUILD
@@ -157,6 +157,7 @@ cc_library(
         "resource_util_internal.h",
     ] + select({
         "//conditions:default": ["resource_util_default.cc"],
+        "//mediapipe/GDMP:godot": [],
         "//mediapipe:android": ["resource_util_android.cc"],
         "//mediapipe:ios": ["resource_util_apple.cc"],
         "//mediapipe:macos": ["resource_util_default.cc"],
@@ -188,6 +189,7 @@ cc_library(
         "//conditions:default": [
             "@com_google_absl//absl/flags:flag",
         ],
+        "//mediapipe/GDMP:godot": ["//mediapipe/GDMP/util:resource_util_godot"],
         "//mediapipe:android": [
             "//mediapipe/util/android:asset_manager_util",
             "//mediapipe/util/android/file/base",
